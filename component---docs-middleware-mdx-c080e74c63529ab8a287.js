(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{Tbaq:function(e,a,t){"use strict";t.r(a),t.d(a,"_frontmatter",(function(){return l})),t.d(a,"default",(function(){return u}));var n=t("wx14"),r=t("zLVn"),i=(t("q1tI"),t("7ljp")),s=t("hhGP"),l=(t("qKvR"),{});void 0!==l&&l&&l===Object(l)&&Object.isExtensible(l)&&!l.hasOwnProperty("__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"docs/Middleware.mdx"}});var o={_frontmatter:l},d=s.a;function u(e){var a=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)(d,Object(n.a)({},o,t,{components:a,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"middleware"},"Middleware"),Object(i.b)("hr",null),Object(i.b)("p",null,"Ziggurat V3.0.0-alpha.3 (will be released in 3.0.0 stable version) introduced the support for middleware in Ziggurat.\nIn older versions of Ziggurat, the mapper-function passed to ",Object(i.b)("inlineCode",{parentName:"p"},"(ziggurat/init)")," would get the message as a parameter which was an object of Clojure PersistentHashMap. Ziggurat assumed that all messages read from Kafka were serialized using Protobuf and it would thus deserialize the message internally."),Object(i.b)("p",null,"As the userbase of Ziggurat has grown and the problem space people are trying to tackle with Ziggurat has widened, we realize that this was a wrong assumption and so from this release Ziggurat will just pass the serialized message directly to the mapper-function."),Object(i.b)("p",null,"We have provided a default middleware that replicates the logic (deserialization of proto) and thus users can use and thus have backward compatibility. "),Object(i.b)("h2",{id:"migration-from-2x---3x-for-middleware"},"Migration from 2.x - 3.x for middleware"),Object(i.b)("p",null,"All you have to do to migrate to the newer version is update the mapper-function. So, for example"),Object(i.b)("p",null,"Change"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-clojure"}),";; 2.x\n(defn main-fn\n    [message]\n    (println message)\n    :success)\n  \n(ziggurat/main start-fn stop-fn {:stream-id {:handler-fn main-fn}})\n")),Object(i.b)("p",null,"to "),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-clojure"}),";; 3.x\n(defn main-fn\n    [message]\n    (println message)\n    :success)\n\n(def handler-fn\n    (-> main-fn\n        (ziggurat.middleware.default/protobuf->hash protoClass :stream-id)))\n  \n(ziggurat/main start-fn stop-fn {:stream-id {:handler-fn handler-fn}})\n")),Object(i.b)("h2",{id:"defining-your-own-middleware"},"Defining your own Middleware"),Object(i.b)("p",null,"If you wish to define your own middleware function, ensure that the function follows these definition restrictions:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"The first argument should be a handler-function"),Object(i.b)("li",{parentName:"ul"},"It should return a function that takes 1 argument: the message")),Object(i.b)("p",null,"An example of a middleware that just logs a message:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-clojure"}),"(defn wrap-log-message [handler-fn]\n  (fn [message]\n    (log/info message)\n    (handler-fn message)))\n")),Object(i.b)("h2",{id:"chaining-middleware"},"Chaining Middleware"),Object(i.b)("p",null,"You can also chain multiple middleware functions to incorporate different behaviours. So for example if you wish to deserialize a message and then log it we can chain these middlewares on wrap your mapper-fn with them."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-clojure"}),";; protobuf->hash is a default middleware that Ziggurat gives to deserialize proto\n(def handler-fn\n  (-> mapper-fn\n      (wrap-log-message)\n      (ziggurat.middleware.default/protobuf->hash protoClass :stream-id)))\n")))}void 0!==u&&u&&u===Object(u)&&Object.isExtensible(u)&&!u.hasOwnProperty("__filemeta")&&Object.defineProperty(u,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"docs/Middleware.mdx"}}),u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---docs-middleware-mdx-c080e74c63529ab8a287.js.map