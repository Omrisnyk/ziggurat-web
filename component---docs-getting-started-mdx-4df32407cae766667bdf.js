(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{DyA5:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return c})),n.d(t,"default",(function(){return p}));var a=n("wx14"),r=n("zLVn"),o=(n("q1tI"),n("7ljp")),i=n("hhGP"),c=(n("qKvR"),{});void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"docs/Getting-Started.mdx"}});var l={_frontmatter:c},s=i.a;function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)(s,Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"getting-started"},"Getting Started"),Object(o.b)("hr",null),Object(o.b)("p",null,"Before we get started with writing a service using Ziggurat, We need to ensure the dependencies are in place. You will need:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Clojure ( >= v1.10.0)"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"You can follow ",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://clojure.org/guides/getting_started"}),"Clojure Documentation")," for installing clojure"))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Leiningen"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"You can follow ",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/technomancy/leiningen#installation"}),"Leiningen Documentation")," for installing leiningen"))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Kafka and Zookeeper"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"You can follow ",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://kafka.apache.org/quickstart"}),"Kafka Getting Started")," for starting kafka brokers and zookeeper instances"))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Rabbitmq"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"You can follow the ",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://www.rabbitmq.com/download.html#installation-guides"}),"Rabbitmq Installation Guide")," for installing Rabbitmq")))),Object(o.b)("hr",null),Object(o.b)("p",null,"In this tutorial we'll make a service that turns on (or off) the air-conditioner by processing a stream of temperature readings. Lets call the service ",Object(o.b)("inlineCode",{parentName:"p"},"inspector-cool"),".\nSo what we need the service to do is"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"read the temperature stream from kafka"),Object(o.b)("li",{parentName:"ul"},"check the temperature against some threshold temperatures and maintain the temperature of AC accordingly.")),Object(o.b)("p",null,"Lets create a service with leiningen and cd into the service. Leiningen scaffolds the code with a structure as shown below."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"> lein new app inspector_cool\n> cd inspector_cool\n> tree .\n├── CHANGELOG.md\n├── LICENSE\n├── README.md\n├── doc\n│   └── intro.md\n├── project.clj\n├── resources\n├── src\n│   └── inspector_cool\n│       └── core.clj\n└── test\n    └── inspector_cool\n        └── core_test.clj\n\n6 directories, 7 files\n")),Object(o.b)("p",null,"The first thing that we'll do is add ziggurat as the dependency in our project.clj. Add ",Object(o.b)("inlineCode",{parentName:"p"},'[tech.gojek/ziggurat "2.7.2"]')," to the dependencies vector in project.clj. Your project.clj should resemble this"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),'(defproject inspector_cool "0.1.0-SNAPSHOT"\n  :description "FIXME: write description"\n  :url "http://example.com/FIXME"\n  :license {:name "EPL-2.0 OR GPL-2.0-or-later WITH Classpath-exception-2.0"\n            :url "https://www.eclipse.org/legal/epl-2.0/"}\n  :dependencies [[org.clojure/clojure "1.9.0"]\n                 [tech.gojek/ziggurat "2.7.2"]]\n  :main ^:skip-aot inspector-cool.core\n  :target-path "target/%s"\n  :profiles {:uberjar {:aot :all}})\n')),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"Note: The latest version of ziggurat can be fetched from ",Object(o.b)("a",Object(a.a)({parentName:"em"},{href:"https://clojars.org/tech.gojek/ziggurat"}),"clojars"),".")),Object(o.b)("p",null,"Now that the project.clj is in place, lets fetch the dependencies"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"lein deps\n")),Object(o.b)("p",null,"Now lets start reading the temperature data from kafka. To do that we'll first need to edit the config to point our service to the correct kafka brokers and the proto class to correctly dereserialize the message. Create a file ",Object(o.b)("inlineCode",{parentName:"p"},"config.edn")," and add this to it."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),'{:ziggurat           {:app-name             "inspector_cool"\n                      :env                  [:dev :keyword]\n                      :stream-router        {:temperature {:application-id       "inspector_cool_test"\n                                                           :bootstrap-servers    "localhost:6667"\n                                                           :stream-threads-count [1 :int]\n                                                           :origin-topic         "temperature-stream"\n                                                           :proto-class          "temperature-proto"}}}}\n')),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"Here ",Object(o.b)("inlineCode",{parentName:"em"},":proto-class")," is the the class-name of the protobuf that is used to serialize the messages in the topic. We are working on the feature to add support for other methods of serialization as well. This ",Object(o.b)("a",Object(a.a)({parentName:"em"},{href:"https://github.com/gojektech/ziggurat/issues/9"}),"issue")," is tracking the updates")),Object(o.b)("p",null,"With the config in place, we can now define the mapper-function (the function that will be applied on every message that is read from the stream). In the core.clj file, write this down"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-clojure"}),"(ns inspector-cool.core\n  (:require [ziggurat.init :as ziggurat]))\n\n(defn start-function []\n  )\n\n(defn stop-function []\n  )\n\n(defn mapper-function [message]\n  (println message))\n\n(defn -main\n  [& args]\n  (ziggurat/main start-function stop-function {:temperature {:handler-fn mapper-function}}))\n")),Object(o.b)("p",null,"Notice how we are passing functions to the ziggurat interface on the last line in ",Object(o.b)("inlineCode",{parentName:"p"},"core.clj"),". The start and stop functions are used for state-management (initializing and graceful shutdown of the application) and the mapper-function is mapped over every message the the application recieves from the stream. So in this case we are printing all the messages that we get from kafka onto the console."),Object(o.b)("p",null,"The start-function can be used to initialize connection pools for api-calls or databases, and the stop function will then release these connections (by shutting down the connection pool). "),Object(o.b)("p",null,"With the config and core.clj in place lets see if we are able to read messages off of kafka. Run"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"lein run\n")),Object(o.b)("p",null,"This should initialize the streams and start printing the messages from kafka onto the console."),Object(o.b)("p",null,"Now that we have successfully started reading the messages from kafka, lets write the logic turning the Air conditioner on (or off) based on some threshold temperatures. Lets write down the logic in core.clj for the same."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"(ns inspector-cool.core\n  (:require [ziggurat.init :as ziggurat]\n            [ziggurat.config :refer [config]]\n            [inspector-cool.aircon :as aircon]))\n\n(defn start-function []\n  )\n\n(defn stop-function []\n  )\n\n\n\n(defn mapper-function [message]\n  (cond\n    (< (:temperature message) (:temperature-threshold-low config)) (aircon/switch-on)\n    (> (:temperature message) (:temperature-threshold-high config)) (aircon/switch-off)\n    :else :skip))\n\n(defn -main\n  [& args]\n  (ziggurat/main start-function stop-function {:temperature {:handler-fn mapper-function}}))\n")),Object(o.b)("p",null,"Note that we are returning ",Object(o.b)("inlineCode",{parentName:"p"},":skip")," in the ",Object(o.b)("inlineCode",{parentName:"p"},":else")," condition in the cond. Ziggurat expects the mapper-function to return any of the keywords ",Object(o.b)("inlineCode",{parentName:"p"},":success, :skip, :retry"),". So the functions ",Object(o.b)("inlineCode",{parentName:"p"},"aircon/switch-on")," and ",Object(o.b)("inlineCode",{parentName:"p"},"aircon/switch-off")," should return ",Object(o.b)("inlineCode",{parentName:"p"},":success")," when the api-call succeeds. If the API call fails, it should return ",Object(o.b)("inlineCode",{parentName:"p"},":retry"),", so the message will be retried. The logic as to how the messages are retried is out of the scope of this guide."),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"aircon/switch-on")," and ",Object(o.b)("inlineCode",{parentName:"p"},"aircon/switch-off")," are basic http call implementations that will make the api-call to the airconditioner."),Object(o.b)("p",null,"And yes, if you are wondering how the config will be defined for ",Object(o.b)("inlineCode",{parentName:"p"},"temperature-threshold-low")," and ",Object(o.b)("inlineCode",{parentName:"p"},"temperature-threshold-high"),", here is what the config.edn looks like."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),'{:ziggurat              {:app-name      "inspector_cool"\n                         :env           [:dev :keyword]\n                         :stream-router {:temperature {:application-id       "inspector_cool_test"\n                                                       :bootstrap-servers    "localhost:6667"\n                                                       :stream-threads-count [1 :int]\n                                                       :origin-topic         "temperature-stream"\n                                                       :proto-class          "temperature-proto"}}}\n :temperature-threshold {:low  18\n                         :high 25}}\n')))}void 0!==p&&p&&p===Object(p)&&Object.isExtensible(p)&&!p.hasOwnProperty("__filemeta")&&Object.defineProperty(p,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"docs/Getting-Started.mdx"}}),p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---docs-getting-started-mdx-4df32407cae766667bdf.js.map