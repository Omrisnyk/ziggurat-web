{"version":3,"sources":["webpack:///./docs/retries-and-queues.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"wPAQaA,G,UAAe,S,6MAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,sBADR,sBAGA,uBACA,iBAAQ,CACN,GAAM,WADR,WAGA,sBACE,kBAAIC,WAAW,MAAK,6BAAGA,WAAW,MAAS,CACvC,KAAQ,kBADQ,iBAGpB,kBAAIA,WAAW,MAAK,6BAAGA,WAAW,MAAS,CACvC,KAAQ,4BADQ,2BAGpB,kBAAIA,WAAW,MAAK,6BAAGA,WAAW,MAAS,CACvC,KAAQ,iBADQ,gBAGpB,kBAAIA,WAAW,MAAK,6BAAGA,WAAW,MAAS,CACvC,KAAQ,mCADQ,gCAGpB,kBAAIA,WAAW,MAAK,6BAAGA,WAAW,MAAS,CACvC,KAAQ,2CADQ,2CAItB,iBAAQ,CACN,GAAM,gBADR,gBAGA,+LAEA,sMAGA,iGACA,+HAEA,+CACA,iBAAQ,CACN,GAAM,sBADR,sBAGA,iGACA,sBACE,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAK,sBAAQA,WAAW,KAAnB,kBAAnB,uOAIF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAK,sBAAQA,WAAW,KAAnB,kBAAnB,+UAMJ,qBAAG,sBAAQA,WAAW,KAAnB,0EACH,iBAAQ,CACN,MAAS,GAET,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,mBAApB,8NAIF,iBAAQ,CACN,GAAM,0CADR,2CAGA,qTAGA,gGACA,8EACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,qBADZ,mPAML,sBACE,kBAAIA,WAAW,MAAf,uCAA4D,0BAAYA,WAAW,MAAvB,KAA5D,6DAEF,sBACE,kBAAIA,WAAW,MAAf,wEACE,mBAAKA,WAAW,MAAK,gCAAMA,WAAW,OAAU,IAA3B,+FAIvB,kBAAIA,WAAW,MAAf,8CACE,mBAAKA,WAAW,MAAK,gCAAMA,WAAW,OAAU,IAA3B,uHADvB,SAKA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,MAApB,+CACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,QAApB,uDACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,eAApB,sCACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,oBAApB,mCAAqH,0BAAYA,WAAW,MAAvB,iBAEvH,iBAAQ,CACN,MAAS,GAET,kBAAIA,WAAW,MAAf,2CAAgE,0BAAYA,WAAW,MAAvB,KAAhE,8CAEF,sBACE,kBAAIA,WAAW,MAAf,wEACE,mBAAKA,WAAW,MAAK,gCAAMA,WAAW,OAAU,IAA3B,yKAMvB,kBAAIA,WAAW,MAAf,8CACE,mBAAKA,WAAW,MAAK,gCAAMA,WAAW,OAAU,IAA3B,uMADvB,SAOA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,MAApB,gDACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,QAApB,uDACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,eAApB,sCACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,oBAApB,mCAAqH,0BAAYA,WAAW,MAAvB,iBAEvH,iBAAQ,CACN,MAAS,GAET,kBAAIA,WAAW,MAAf,kDAAuE,0BAAYA,WAAW,MAAvB,KAAvE,uCAGF,sBACE,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAK,kBAAIA,WAAW,KAAf,oDAAwE,0BAAYA,WAAW,MAAvB,YAE7F,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,wDACA,mBAAKA,WAAW,MAAK,gCAAMA,WAAW,OAAU,IAA3B,0JAMvB,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,sDACA,mBAAKA,WAAW,MAAK,gCAAMA,WAAW,OAAU,IAA3B,oLAKrB,iBAAGA,WAAW,MAAd,SACA,kBAAIA,WAAW,MACb,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,MAApB,gDACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,QAApB,uDACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,WAApB,sCACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,gBAApB,mCAAiH,0BAAYA,WAAW,MAAvB,eAIvH,qBAAG,sBAAQA,WAAW,KAAnB,oDACH,iBAAQ,CACN,GAAM,yCADR,yCAGA,gM,2MAMJJ,EAAWK,gBAAiB","file":"component---docs-retries-and-queues-mdx-19b7fbb89cfc771e2400.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/ziggurat-web/ziggurat-web/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"retries-and-queues\"\n    }}>{`Retries and Queues`}</h1>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"content\"\n    }}>{`Content`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#introduction\"\n        }}>{`Introduction`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#topology-of-the-queues\"\n        }}>{`Topology of the Queues`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#queue-stats\"\n        }}>{`Queue Stats`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#peaking-and-replaying-deadset\"\n        }}>{`Peaking & Replaying DeadSet`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#what-happens-when-the-actor-goes-down\"\n        }}>{`What happens when the actor goes down`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"introduction\"\n    }}>{`Introduction`}</h2>\n    <p>{`When processing a stream of events, there are many times where the processing might fail.\nEither because of the issue in the function logic or some issue downstream.`}</p>\n    <p>{`In the first case, we don't want to lose the message. In second, we\npossibly want to retry the message and expect that the downstream\nservice might be down intermittently.`}</p>\n    <p>{`This acts as a foundation of the requirement of a queue to fall back to.`}</p>\n    <p>{`Ziggurat provides Retry-As-A-Service, which means your messages\nautomatically get queued on failures.`}</p>\n    <p>{`Let's take a deep dive`}</p>\n    <h2 {...{\n      \"id\": \"topology-of-queues\"\n    }}>{`Topology of Queues`}</h2>\n    <p>{`Every application using ziggurat creates 3 dedicated queues in Rabbitmq:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Delayed Queue:`}</strong>{`\nWhen an error occurs for a message in the mapper-function. The message is put in the delay queue with a TTL (can be set in the config).\nThey wait in the queue until the TTL expires. Then they are put into the instant queue.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Instant Queue:`}</strong>{`\nThe retry logic in ziggurat reads messages from the instant queue and retries them.\nIf the retry fails again it puts the message back into the delay queue with the predefined TTL.\nThis happens 3(or however many times the RETRY_COUNT config defines it). If the message still does not succeed it is put into the Dead-set queue.`}</p>\n      </li>\n    </ol>\n    <p><strong parentName=\"p\">{`This results in a linear backoff for the retires of the same message.`}</strong></p>\n    <ol {...{\n      \"start\": 3\n    }}>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Dead Set Queue:`}</strong>{`\nMessages are put into the dead set when they fail to successfully process even after however many times the RETRY_COUNT defines it.\nYou can retry messages from the dead set queue by making an API call to the actor.`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"peaking-replaying-and-deleting-deadset\"\n    }}>{`Peaking, Replaying and Deleting DeadSet`}</h2>\n    <p>{`DeadSet is the last place a message can reach in its life cycle because of failures.\nZiggurat does not automatically retry the messages in the dead set as it could be due to a bug in the mapper-function and the\nuser can trigger the retry of messages once the problem has been fixed.`}</p>\n    <p>{`There are three built-in APIs to view and trigger retry on the DeadSet:`}</p>\n    <p>{`  Assuming your stream routes are defined as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-clojure\"\n      }}>{`  (ziggurat/main start-fn stop-fn {:stream-id-1 {:handler-fn main-fn}\n                                   :stream-id-2 {:handler-fn (fn [] :outbound-channel)\n                                                 :outbound-channel main-fn}})\n`}</code></pre>\n    <ol>\n      <li parentName=\"ol\">{`Peek: A GET API where you can fetch `}<inlineCode parentName=\"li\">{`N`}</inlineCode>{` messages from the deadset to see which message went in.`}</li>\n    </ol>\n    <ul>\n      <li parentName=\"ul\">{`For multi-stream applications (that read from multiple kafka streams)`}\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`curl -X GET \\\\\n  'http://localhost:8010/v1/dead_set?count=10&topic-entity=stream-id-1'\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">{`For multi-stream applications with channels`}\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`curl -X GET \\\\\n  'http://localhost:8010/v1/dead_set?count=10&topic-entity=stream-id-2&channel=outbound-channel'\n`}</code></pre>\n        {`where`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`10`}</inlineCode>{` is the number of messages you wish to view`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`8010`}</inlineCode>{` is the port that is listening to the HTTP requests`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`stream-id-*`}</inlineCode>{` is the topic entity of your actor`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`outbound-channel`}</inlineCode>{` is the channel on topic-entity `}<inlineCode parentName=\"li\">{`stream-id-2`}</inlineCode></li>\n    </ul>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`Replay: A POST API where you can select `}<inlineCode parentName=\"li\">{`N`}</inlineCode>{` messages to be retried from the DeadSet.`}</li>\n    </ol>\n    <ul>\n      <li parentName=\"ul\">{`For multi-stream applications (that read from multiple kafka streams)`}\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`curl -X POST \\\\\n  http://localhost:8010/v1/dead_set/replay \\\\\n  -H 'content-type: application/json' \\\\\n  -d '{\"count\":\"10\", \"topic_entity\":\"stream-id-1\"}'\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">{`For multi-stream applications with channels`}\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`curl -X POST \\\\\n  http://localhost:8010/v1/dead_set/replay \\\\\n  -H 'content-type: application/json' \\\\\n  -d '{\"count\":\"10\", \"topic_entity\":\"stream-id-2\", \"channel\": \"outbound-channel\"}'\n`}</code></pre>\n        {`where`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`10`}</inlineCode>{` is the number of messages you wish to retry`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`8010`}</inlineCode>{` is the port that is listening to the HTTP requests`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`stream-id-*`}</inlineCode>{` is the topic entity of your actor`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`outbound-channel`}</inlineCode>{` is the channel on topic-entity `}<inlineCode parentName=\"li\">{`stream-id-2`}</inlineCode></li>\n    </ul>\n    <ol {...{\n      \"start\": 3\n    }}>\n      <li parentName=\"ol\">{`Delete: A DELETE API where you delete the last `}<inlineCode parentName=\"li\">{`N`}</inlineCode>{` messages from the\nDeadSet queue.`}</li>\n    </ol>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><em parentName=\"p\">{`This feature is available in ziggurat version >= `}<inlineCode parentName=\"em\">{`2.8.0`}</inlineCode></em></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`For deleting messages from an actor without channels`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`curl -X DELETE \\\\\nhttp://localhost:8010/v1/dead_set \\\\\n-H 'content-type: application/json' \\\\\n-d '{\"count\":\"10\", \"topic-entity\":\"booking\"}'\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`For deleteing messages from an actor with channels`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`curl -X DELETE \\\\\nhttp://localhost:8010/v1/dead_set \\\\\n-H 'content-type: application/json' \\\\\n-d '{\"count\":\"10\", \"topic-entity\":\"booking\", \"channel\": \"dss-outbound\"}'\n`}</code></pre>\n        <p parentName=\"li\">{`where`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`10`}</inlineCode>{` is the number of messages you wish to retry`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`8010`}</inlineCode>{` is the port that is listening to the HTTP requests`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`booking`}</inlineCode>{` is the topic entity of your actor`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`dss-outbound`}</inlineCode>{` is the channel on topic-entity `}<inlineCode parentName=\"li\">{`booking`}</inlineCode></li>\n        </ul>\n      </li>\n    </ul>\n    <p><strong parentName=\"p\">{`You cannot get/replay/delete a specific message`}</strong></p>\n    <h2 {...{\n      \"id\": \"what-happens-when-the-actor-goes-down\"\n    }}>{`What happens when the actor goes down`}</h2>\n    <p>{`When the actor goes down all the processing stops. So there won't be any new messages getting read from Kafka.\nNo new messages will come into any of the queues.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}